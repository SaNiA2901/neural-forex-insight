import { CandleData } from '@/types/session';
import { PredictionResult, PredictionConfig } from '@/types/trading';
import { realMLService } from './ml/RealMLService';
import { TechnicalIndicatorService, TechnicalIndicators } from './indicators/TechnicalIndicators';
import { PatternAnalysisService, PatternSignals, VolumeAnalysis } from './patterns/PatternAnalysis';
import { AdvancedFactorsService, ModelWeights } from './prediction/AdvancedFactors';
import { RecommendationEngine } from './prediction/RecommendationEngine';

// –ö—ç—à –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç—Ä–∏–∫
const historicalCache = new Map<string, CandleData[]>();

export const predictionService = {

  // –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  async calculateTechnicalIndicators(candles: CandleData[], currentIndex: number): Promise<TechnicalIndicators> {
    return await TechnicalIndicatorService.calculateAll(candles, currentIndex);
  },

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  analyzePatterns(candles: CandleData[], currentIndex: number): PatternSignals {
    return PatternAnalysisService.analyzePatterns(candles, currentIndex);
  },

  // –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
  analyzeVolume(candles: CandleData[], currentIndex: number): VolumeAnalysis {
    return PatternAnalysisService.analyzeVolume(candles, currentIndex);
  },

  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
  async generateAdvancedPrediction(
    candles: CandleData[], 
    currentIndex: number,
    config: PredictionConfig
  ): Promise<PredictionResult | null> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
      const mlPrediction = await realMLService.generatePrediction(candles, currentIndex, config);
      
      if (mlPrediction) {
        console.log('üß† ML –ø—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', mlPrediction.direction, mlPrediction.probability + '%');
        return mlPrediction;
      }
      
      // CRITICAL FIX: Remove fallback that might return last direction
      // Return null instead of potentially biased fallback
      if (candles.length < 5 || currentIndex < 0) return null;
      
      const current = candles[currentIndex];
      if (!current) return null;
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      const technical = await this.calculateTechnicalIndicators(candles, currentIndex);
      
      // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const patterns = this.analyzePatterns(candles, currentIndex);
      
      // –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
      const volume = this.analyzeVolume(candles, currentIndex);
      
      // –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–æ–≤
      const factors = AdvancedFactorsService.calculateAdvancedFactors(current, technical, patterns, volume);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º adaptive weights
      const weightedScore = AdvancedFactorsService.calculateWeightedScore(factors);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
      const direction = weightedScore > 50 ? 'UP' : 'DOWN';
      const rawProbability = Math.abs(weightedScore - 50) * 2; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-100
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º confidence modifiers
      const confidenceModifiers = AdvancedFactorsService.calculateConfidenceModifiers(technical, patterns);
      const probability = Math.min(95, Math.max(55, rawProbability * confidenceModifiers));
      const confidence = Math.min(90, Math.max(60, probability - Math.random() * 5));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
      const recommendation = RecommendationEngine.generateRecommendation(
        direction, 
        probability, 
        config.predictionInterval, 
        patterns.candlestickPattern,
        technical
      );
      
      return {
        direction,
        probability: Number(probability.toFixed(1)),
        confidence: Number(confidence.toFixed(1)),
        interval: config.predictionInterval,
        factors,
        recommendation
      };
      
    } catch (error) {
      console.error('Error in advanced prediction generation:', error);
      return null;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
  updateModelWeights(predictionHistory: any[]): void {
    AdvancedFactorsService.updateModelWeights(predictionHistory);
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
  getModelWeights(): ModelWeights {
    return AdvancedFactorsService.getModelWeights();
  },

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  cacheHistoricalData(key: string, data: CandleData[]): void {
    historicalCache.set(key, data);
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
  getCachedData(key: string): CandleData[] | undefined {
    return historicalCache.get(key);
  }
};